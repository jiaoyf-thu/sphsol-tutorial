I/O Files
=========

.. Note:: Modify the ``Input/`` files to customise your simulation scenario.

Input
-----

The initial states of SPH particles are defined in ``Input/0-Particles.csv``, which can be generated by modifying the ``set_parts_geometry()`` function in  ``PrePost/example/test.py``.

.. code-block:: python

  # set parts geometry
  def set_parts_geometry():
    # set spatial mode
    lattice = "grid"   
    eta     = eta_grid  if lattice == "grid" else eta_hcp
    coef    = coef_grid if lattice == "grid" else coef_hcp
  
    # sphere target: m-kg-s
    tar_cell_r = 0.0007
    tar_radius = 0.03
    tar_rho    = 2700
    tar_center = np.array([0,0,0])
    tar_vel    = np.array([0,0,0])

    # create particles for target body
    tar     = part(part_id=0, vel=tar_vel, mass=tar_rho*4./3.*np.pi*tar_cell_r**3/coef, \
              rho=tar_rho, hsml=2.0*eta*tar_cell_r)
    box_pos = generate_box(box_size=tar_radius*2*np.array([1,1,1]), box_center=tar_center, \
              r=tar_cell_r, lattice=lattice)
    box_pos = rand_rotate(box_pos, tar_center)
    def tar_geometry(x,y,z):
      return (x-tar_center[0])**2+(y-tar_center[1])**2+(z-tar_center[2])**2 <= tar_radius**2
    tar.create_particles(box_pos,tar_geometry)
  
    # sphere impactor: m-kg-s
    imp_cell_r = 0.0007
    imp_radius = 0.0035
    imp_rho    = 1185
    imp_center = np.array([0.015,0.033,0])
    imp_vel    = np.array([0,-3200,0])

    # create particles for impactor
    imp     = part(part_id=1, vel=imp_vel, mass=imp_rho*4./3.*np.pi*imp_cell_r**3/coef, \
              rho=imp_rho, hsml=2.0*eta*imp_cell_r)
    box_pos = generate_box(box_size=imp_radius*2*np.array([1,1,1]), box_center=imp_center, \
              r=imp_cell_r, lattice="grid")
    box_pos = rand_rotate(box_pos, imp_center)
    def imp_geometry(x,y,z):
      return (x-imp_center[0])**2+(y-imp_center[1])**2+(z-imp_center[2])**2 <= imp_radius**2
    imp.create_particles(box_pos, imp_geometry)
  
    print(" - Initial hsml = %e" % (2.0*eta*tar_cell_r))
    print(" - Initial dt = %e" % (0.2*2.0*eta*tar_cell_r/4000.0))
  
    # assemble parts
    parts = {}
    parts[0] = tar
    parts[1] = imp
  
    return parts

The particles' ID, position, velocity, part ID, mass and density are necessary and should be formatted as (*optional)

.. csv-table::
  :header: "ID","X","Y","Z","VX","VY","VZ","PART","MASS","DENSITY","IFLAG*","DAMAGE*"

  "0","0.0e0","0.0e0","0.0e0","0.0e0","0.0e0","0.0e0",0,"0.0e0","0.0e0","1","0.0E0"
  "1","0.0e0","0.0e0","0.0e0","0.0e0","0.0e0","0.0e0",0,"0.0e0","0.0e0","1","0.0E0"
  "2","0.0e0","0.0e0","0.0e0","0.0e0","0.0e0","0.0e0",0,"0.0e0","0.0e0","1","0.0E0"

The ``Input/1-Settings.txt`` is used to setup the solver and I/O, where the rows are fixed and you may choose/define the values for them.
There are 4 datatypes: ``I`` for integers, ``F`` for floats in scientific notation, ``B`` for bool in 0/1, and ``S`` for string that you should choose from the given options.

.. code-block:: text
  
  // --------------------------------------------------------------------------------
  // VERSION 1.7
  // DATATYPE [I]: INT, [F]: FLOAT, [B]: 0/1, [S]: STRING
  // --------------------------------------------------------------------------------
  // SETTINGS: SOLVER
  // --------------------------------------------------------------------------------
  KERNEL                  [S] : CUBIC_SPLINE
  ARTIFICIAL_VISCOSITY    [S] : STANDARD
  ARTIFICIAL_HEAT         [S] : NONE
  ARTIFICIAL_STRESS       [S] : NONE
  XSPH                    [S] : NONE
  DENSITY_UPDATE          [S] : CONTINUOUS_DENSITY
  NEIGHBOR_SEARCH         [S] : KDTREE
  GRAVITY                 [S] : NONE
  GRAVITY_CONST           [F] : 0.0E0,0.0E0,0.0E0
  GRAVITY_SPHERE          [F] : 0.0E0,0.0E0,0.0E0,0.0E0,0.0E0
  ROTATION                [S] : NONE
  ROTATION_TARGET         [F] : 0.0E0,0.0E0,0.0E0,0.0E0,0.0E0,0.0E0,0.0E0,0.0E0,0.0E0
  DAMPING_TIME            [F] : 0.0E0
  SYMMETRIC_BOUNDARY      [S] : NONE
  PLANE_DEFINE            [F] : 0.0E0,0.0E0,0.0E0,0.0E0
  STABLIZATION            [B] : 0
  LATE_STAGE              [B] : 0
  // --------------------------------------------------------------------------------
  // SETTINGS: LIMIT
  // --------------------------------------------------------------------------------
  PARTICLES_NUM           [I] : 41428
  PART_NUM                [I] : 2
  PART_MAT_ID             [I] : 2,3
  TOTAL_RUN_TIME          [F] : 5.0E-5
  TIMESTEP_REF            [F] : 8.4E-8
  TIMESTEP_LIMIT          [F] : 1.0E-1,1.0E1
  HSML_REF                [F] : 1.68E-3
  HSML_LIMIT              [F] : 5.0E-1,2.0E0
  VOLUME_MIN              [F] : -1.0E5,-1.0E5,-1.0E5
  VOLUME_MAX              [F] : 1.0E5,1.0E5,1.0E5
  // --------------------------------------------------------------------------------
  // SETTINGS: INPUT
  // --------------------------------------------------------------------------------
  INPUT_ID                [B] : 1
  INPUT_POS               [B] : 1
  INPUT_VEL               [B] : 1
  INPUT_PART              [B] : 1
  INPUT_MASS              [B] : 1
  INPUT_DENSITY           [B] : 1
  INPUT_IFLAG             [B] : 0
  INPUT_DAMAGE            [B] : 0
  // --------------------------------------------------------------------------------
  // SETTINGS: OUTPUT
  // --------------------------------------------------------------------------------
  TOTAL_OUTPUT_STEP       [I] : 10
  OUTPUT_POS              [B] : 1
  OUTPUT_VEL              [B] : 1
  OUTPUT_ACC              [B] : 0
  OUTPUT_PRESSURE         [B] : 1
  OUTPUT_STRESS           [B] : 0
  OUTPUT_IFLAG            [B] : 0
  OUTPUT_MASS             [B] : 0
  OUTPUT_DENSITY          [B] : 1
  OUTPUT_ENERGY           [B] : 1
  OUTPUT_HSML             [B] : 0
  OUTPUT_C_SOUND          [B] : 0
  OUTPUT_DAMAGE           [B] : 1
  OUTPUT_PART             [B] : 0
  OUTPUT_FRAGMENT         [B] : 0
  OUTPUT_DISTENTION       [B] : 0
  OUTPUT_ROTATION         [B] : 0

The material models should be defined in ``Input/2-Materials.txt``, where we have provided some commonly used models for basalt, pumice, nylon, and aluminum.
The default units are in m-kg-s. Define your material model with the format as below.

.. code-block:: text

  // --------------------------------------------------------------------------------
  // MATERIAL 0: NAME
  // --------------------------------------------------------------------------------
  @MATERIAL
  MAT_ID                  [I] : 0
  MAT_NAME                [S] : NAME
  ENUM_EOS                [S] : TILLOTSON/SIMPLIFIED_TILLOTSON/GRUNEISEN
  ENUM_POROSITY           [S] : P_ALPHA/NONE
  ENUM_YIELD              [S] : VON_MISES/LUND
  ENUM_DAMAGE             [S] : NONE/GRADY_KIPP
  MODULUS_SHEAR           [F] : 0.0E0
  MODULUS_BULK            [F] : 0.0E0
  MODULUS_ELASTIC         [F] : 0.0E0
  @TILLOTSON
  COEF_A                  [F] : 0.0E0
  COEF_B                  [F] : 0.0E0
  ALPHA                   [F] : 0.0E0
  BETA                    [F] : 0.0E0
  MODULUS_A               [F] : 0.0E0
  MODULUS_B               [F] : 0.0E0
  E0                      [F] : 0.0E0
  ECV                     [F] : 0.0E0
  EIV                     [F] : 0.0E0
  @SIMPLIFIED_TILLOTSON
  COFF_C                  [F] : 0.0E0
  MODULUS_A               [F] : 0.0E0
  @GRUNEISEN
  S                       [F] : 0.0E0
  C0                      [F] : 0.0E0
  GAMMA0                  [F] : 0.0E0
  @P_ALPHA
  ALPHA0                  [F] : 0.0E0
  PE                      [F] : 0.0E0
  PS                      [F] : 0.0E0
  @VON_MISES
  Y0                      [F] : 0.0E0
  @LUND
  YI0                     [F] : 0.0E0
  YD0                     [F] : 0.0E0
  YM                      [F] : 0.0E0
  MUI                     [F] : 0.0E0
  MUD                     [F] : 0.0E0
  @GRADY_KIPP
  M                       [F] : 0.0E0
  K                       [F] : 0.0E0
  CG_CE                   [F] : 0.0E0
  @END

Output
------

The particles data are exported to ``Output/Particlesxxxx.csv`` in each output timestep.
The ``.csv`` files should be easy to visualize (using e.g., `paraview <https://www.paraview.org/>`_) or convert into other data types.

You can also monitor the simulation progress in ``Output/Log.txt`` in real time.
